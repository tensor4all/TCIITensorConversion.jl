var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TCIITensorConversion","category":"page"},{"location":"#TCIITensorConversion","page":"Home","title":"TCIITensorConversion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TCIITensorConversion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TCIITensorConversion]","category":"page"},{"location":"#ITensors.ITensorMPS.MPS-Union{Tuple{TensorCrossInterpolation.TensorTrain{T}}, Tuple{T}} where T","page":"Home","title":"ITensors.ITensorMPS.MPS","text":"MPS(tt, siteindices...)\n\nConvert a tensor train to an ITensor MPS\n\ntt            Tensor train\nsiteindices   Arrays of ITensor Index objects.\n\nIf siteindices is left empty, a default set of indices will be used.\n\n\n\n\n\n","category":"method"},{"location":"#TensorCrossInterpolation.TensorTrain-Tuple{MPS}","page":"Home","title":"TensorCrossInterpolation.TensorTrain","text":"function TCI.TensorTrain(mps::ITensors.MPS)\n\nConverts an ITensor MPS object into a TensorTrain. Note that this only works if the MPS has a single leg per site! Otherwise, use TCI.TensorTrain(mps::ITensors.MPO).\n\n\n\n\n\n","category":"method"},{"location":"#TensorCrossInterpolation.TensorTrain-Union{Tuple{ITensors.ITensorMPS.MPO}, Tuple{V}, Tuple{N}} where {N, V}","page":"Home","title":"TensorCrossInterpolation.TensorTrain","text":"function TCI.TensorTrain(mps::ITensors.MPO)\n\nConvertes an ITensor MPO object into a TensorTrain.\n\n\n\n\n\n","category":"method"},{"location":"#TCIITensorConversion.evaluate_mps-Tuple{Union{ITensors.ITensorMPS.MPO, MPS}, AbstractVector{<:ITensors.Index}, AbstractVector{Int64}}","page":"Home","title":"TCIITensorConversion.evaluate_mps","text":"function evaluate_mps(\n    mps::Union{ITensors.MPS,ITensors.MPO},\n    indices::AbstractVector{<:ITensors.Index},\n    indexvalues::AbstractVector{Int}\n)\n\nEvaluates an MPS or MPO for a given set of index values.\n\nindices is a list of ITensors.Index objects that specifies the order in which indices are given.\nindexvalues is a list of integer values in the same order as indices.\n\nIf many evaluations are necessary, it may be advantageous to convert your MPS to a TensorCrossInterpolation.TTCache object first.\n\n\n\n\n\n","category":"method"},{"location":"#TCIITensorConversion.evaluate_mps-Tuple{Union{ITensors.ITensorMPS.MPO, MPS}, Vararg{AbstractVector{<:Tuple{ITensors.Index, Int64}}}}","page":"Home","title":"TCIITensorConversion.evaluate_mps","text":"function evaluate_mps(\n    mps::Union{ITensors.MPS,ITensors.MPO},\n    indexspecs::Vararg{AbstractVector{<:Tuple{ITensors.Index,Int}}}\n)\n\nEvaluates an MPS or MPO for a given set of index values.\n\nindexspec is a list of tuples, where each tuple contains an Itensors.Index object specifying an index, and an Int corresponding to the value of the specified index.\n\nIf many evaluations are necessary, it may be advantageous to convert your MPS to a TensorCrossInterpolation.TTCache object first.\n\n\n\n\n\n","category":"method"}]
}
